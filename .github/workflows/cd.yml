name: CD - Deploy to Production

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: ${{ github.repository_owner }}
  IMAGE_NAME: flappy-nginx

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Check deployment configuration
      run: |
        echo "🔍 Checking deployment configuration..."
        echo "SSH_HOST configured: ${{ secrets.SSH_HOST != '' }}"
        echo "SSH_USER configured: ${{ secrets.SSH_USER != '' }}"
        echo "SSH_PRIVATE_KEY configured: ${{ secrets.SSH_PRIVATE_KEY != '' }}"
        echo "DEPLOY_DIR configured: ${{ secrets.DEPLOY_DIR != '' }}"
        if [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "⚠️ SSH_HOST not configured - deployment will be skipped"
        else
          echo "✅ SSH configuration found - deployment will proceed"
        fi
    
    - name: Deploy to production server
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) && secrets.SSH_HOST != ''
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT || '22' }}
        username: ${{ secrets.SSH_USER || 'ubuntu' }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # デプロイディレクトリの作成
          sudo mkdir -p ${{ secrets.DEPLOY_DIR }}
          
          # docker-compose.prod.yml をアップロード（既存の場合はスキップ）
          if [ ! -f "${{ secrets.DEPLOY_DIR }}/docker-compose.prod.yml" ]; then
            echo "Downloading docker-compose.prod.yml..."
            curl -o ${{ secrets.DEPLOY_DIR }}/docker-compose.prod.yml \
              https://raw.githubusercontent.com/${{ github.repository }}/master/docker-compose.prod.yml
          fi
          
          # deploy.sh をアップロード
          curl -o ${{ secrets.DEPLOY_DIR }}/deploy.sh \
            https://raw.githubusercontent.com/${{ github.repository }}/master/scripts/deploy.sh
          chmod +x ${{ secrets.DEPLOY_DIR }}/deploy.sh
          
          # 環境変数を設定してデプロイ実行
          export DEPLOY_DIR="${{ secrets.DEPLOY_DIR }}"
          export REGISTRY_NAMESPACE="${{ env.REGISTRY_NAMESPACE }}"
          export IMAGE_NAME="${{ env.IMAGE_NAME }}"
          export IMAGE_TAG="${{ github.ref_name }}"
          export REGISTRY="${{ env.REGISTRY }}"
          
          # GitHub Container Registry へのログイン
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # デプロイスクリプト実行
          cd ${{ secrets.DEPLOY_DIR }}
          ./deploy.sh

    - name: Deployment skipped notification
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) && secrets.SSH_HOST == ''
      run: |
        echo "⏭️ Deployment skipped: SSH_HOST secret not configured"
        echo "Docker image has been built and pushed to GitHub Container Registry"
        echo "Image: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ] && [ -n "${{ secrets.SSH_HOST }}" ]; then
          echo "🎉 Deployment successful!"
          echo "Application URL: http://${{ secrets.SSH_HOST }}:8080"
        elif [ "${{ job.status }}" = "success" ] && [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "✅ Build successful! Image pushed to GitHub Container Registry"
          echo "Image: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        else
          echo "❌ Build/Deployment failed!"
        fi
    
    - name: Create deployment summary
      if: always()
      run: |
        echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch/Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ] && [ -n "${{ secrets.SSH_HOST }}" ]; then
          echo "- **Deployment**: ✅ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: http://${{ secrets.SSH_HOST }}:8080" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ job.status }}" = "success" ] && [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "- **Deployment**: ⏭️ Skipped (SSH_HOST not configured)" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Registry**: ✅ Image pushed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Deployment**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi
