name: CD with GitHub Copilot Analysis

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  REGISTRY_NAMESPACE: ${{ github.repository_owner }}
  IMAGE_NAME: flappy-nginx

jobs:
  build-deploy-copilot:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install GitHub CLI with Copilot
      run: |
        # GitHub CLI インストール
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
        
        # Copilot 拡張をインストール
        gh extension install github/gh-copilot
        echo "✅ GitHub CLI with Copilot ready for CD pipeline"
    
    - name: Authenticate GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "$GH_TOKEN" | gh auth login --with-token
    
    - name: Pre-deployment Copilot Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "## 🚀 CD - GitHub Copilot デプロイ分析" > cd_copilot_report.md
        echo "" >> cd_copilot_report.md
        echo "### 📅 デプロイ開始日時: $(date '+%Y-%m-%d %H:%M:%S')" >> cd_copilot_report.md
        echo "### 🏷️ リリース: ${{ github.ref_name }}" >> cd_copilot_report.md
        echo "" >> cd_copilot_report.md
        
        # Copilot でデプロイメント戦略分析
        if command -v gh >/dev/null 2>&1 && gh extension list | grep -q "gh-copilot" 2>/dev/null; then
          echo "### 🤖 Copilot デプロイメント分析" >> cd_copilot_report.md
          echo "" >> cd_copilot_report.md
          
          # デプロイメントのベストプラクティス取得
          {
            echo "nginx Alpine Docker コンテナの本番デプロイメント戦略とセキュリティ対策について提案してください" | \
            gh copilot suggest 2>/dev/null | head -20
          } >> cd_copilot_report.md 2>/dev/null || {
            echo "**💫 標準デプロイメント推奨事項:**" >> cd_copilot_report.md
            echo "- 🔒 HTTPS/TLS証明書の設定" >> cd_copilot_report.md
            echo "- 🚀 ブルー・グリーンデプロイメント" >> cd_copilot_report.md
            echo "- 📊 ヘルスチェックとモニタリング" >> cd_copilot_report.md
            echo "- 🔄 自動ロールバック機能" >> cd_copilot_report.md
          }
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker Image with Copilot Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "" >> cd_copilot_report.md
        echo "### 🐳 Docker ビルド & Copilot 最適化分析" >> cd_copilot_report.md
        echo "" >> cd_copilot_report.md
        
        # Docker ビルド開始時刻記録
        BUILD_START=$(date +%s)
        echo "**🔨 ビルド開始:** $(date '+%H:%M:%S')" >> cd_copilot_report.md
        
        # Copilot でDockerfile最適化提案
        if command -v gh >/dev/null 2>&1 && gh extension list | grep -q "gh-copilot" 2>/dev/null; then
          echo "" >> cd_copilot_report.md
          echo "**🤖 Copilot Dockerfile 最適化提案:**" >> cd_copilot_report.md
          
          # Dockerfileの内容を基に最適化提案
          if [ -f "Dockerfile" ]; then
            DOCKERFILE_PREVIEW=$(head -10 Dockerfile | grep -v '^#' | head -5)
            {
              echo "以下のDockerfile構成の本番環境向け最適化とセキュリティ強化について提案してください: $DOCKERFILE_PREVIEW" | \
              gh copilot suggest 2>/dev/null | head -15
            } >> cd_copilot_report.md 2>/dev/null || {
              echo "- 🚀 マルチステージビルドの活用" >> cd_copilot_report.md
              echo "- 🔒 非rootユーザーでの実行" >> cd_copilot_report.md
              echo "- 📦 不要パッケージの除去" >> cd_copilot_report.md
            }
          fi
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Record Build Metrics
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        echo "" >> cd_copilot_report.md
        echo "**📊 ビルドメトリクス:**" >> cd_copilot_report.md
        echo "- ⏱️ ビルド時間: ${BUILD_TIME} 秒" >> cd_copilot_report.md
        echo "- 🏗️ プラットフォーム: linux/amd64, linux/arm64" >> cd_copilot_report.md
        echo "- 📦 レジストリ: ${{ env.REGISTRY }}" >> cd_copilot_report.md
        echo "" >> cd_copilot_report.md

    - name: Pre-deployment Copilot Security Check
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        echo "### � セキュリティ & デプロイメント準備" >> cd_copilot_report.md
        echo "" >> cd_copilot_report.md
        
        # デプロイ設定の確認
        echo "**⚙️ デプロイ設定確認:**" >> cd_copilot_report.md
        
        if [ -n "$SSH_HOST" ]; then
          echo "- ✅ SSH_HOST: 設定済み" >> cd_copilot_report.md
          echo "- ✅ デプロイ先: 本番サーバー" >> cd_copilot_report.md
        else
          echo "- ⏭️ SSH_HOST: 未設定（コンテナレジストリのみ）" >> cd_copilot_report.md
        fi
        
        echo "- ✅ SSH_USER: ${{ secrets.SSH_USER != '' && '設定済み' || '未設定' }}" >> cd_copilot_report.md
        echo "- ✅ SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY != '' && '設定済み' || '未設定' }}" >> cd_copilot_report.md
        echo "- ✅ DEPLOY_DIR: ${{ secrets.DEPLOY_DIR != '' && '設定済み' || '未設定' }}" >> cd_copilot_report.md
        
        echo "" >> cd_copilot_report.md
        
        # Copilot でセキュリティ分析
        if command -v gh >/dev/null 2>&1 && gh extension list | grep -q "gh-copilot" 2>/dev/null; then
          echo "**🤖 Copilot セキュリティ分析:**" >> cd_copilot_report.md
          echo "" >> cd_copilot_report.md
          
          {
            echo "nginx Docker コンテナの本番デプロイメントにおけるセキュリティ対策とモニタリングのベストプラクティスを教えてください" | \
            gh copilot suggest 2>/dev/null | head -15
          } >> cd_copilot_report.md 2>/dev/null || {
            echo "- 🛡️ nginx セキュリティヘッダー設定" >> cd_copilot_report.md
            echo "- 🔥 ファイアウォール設定の確認" >> cd_copilot_report.md
            echo "- 📊 ログ監視とアラート設定" >> cd_copilot_report.md
            echo "- 🔄 定期的なセキュリティアップデート" >> cd_copilot_report.md
          }
        fi
    
    - name: Deploy to Production Server (with Copilot)
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT || '22' }}
        username: ${{ secrets.SSH_USER || 'ubuntu' }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # SSH_HOSTが設定されていない場合はスキップ
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "SSH_HOST not configured - skipping deployment"
            exit 0
          fi
          
          # GitHub Container Registry へのログイン
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # 新しいイメージをプル
          docker pull ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # 既存コンテナ停止・削除（エラーを無視）
          docker stop flappy-nginx-prod || true
          docker rm flappy-nginx-prod || true
          
          # 新しいコンテナ起動
          docker run -d -p 8080:80 --name flappy-nginx-prod \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # ヘルスチェック
          sleep 5
          curl -f http://localhost:8080/health || echo "Health check warning"
          
          echo "✅ Production deployment completed!"
    
    - name: Finalize Copilot CD Report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "" >> cd_copilot_report.md
        echo "---" >> cd_copilot_report.md
        echo "" >> cd_copilot_report.md
        echo "🤖 **GitHub Copilot CD 分析完了** - $(date '+%Y-%m-%d %H:%M:%S')" >> cd_copilot_report.md
        echo "" >> cd_copilot_report.md
        echo "**🚀 デプロイメント完了:** ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> cd_copilot_report.md
    
    - name: Create Enhanced Deployment Summary
      if: always()
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub Issues にデプロイメントレポート作成（成功時のみ）
        if [ "${{ job.status }}" = "success" ]; then
          echo "## 🚀 デプロイメント完了レポート" > deploy_summary.md
          echo "" >> deploy_summary.md
          echo "### 📋 デプロイ情報" >> deploy_summary.md
          echo "- **リリース**: ${{ github.ref_name }}" >> deploy_summary.md
          echo "- **コミット**: ${{ github.sha }}" >> deploy_summary.md
          echo "- **イメージ**: \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> deploy_summary.md
          echo "- **デプロイ日時**: $(date '+%Y-%m-%d %H:%M:%S')" >> deploy_summary.md
          echo "" >> deploy_summary.md
          
          if [ -n "$SSH_HOST" ]; then
            echo "- **URL**: http://$SSH_HOST:8080" >> deploy_summary.md
            echo "- **ステータス**: ✅ 本番デプロイ完了" >> deploy_summary.md
          else
            echo "- **ステータス**: ⏭️ レジストリプッシュ完了" >> deploy_summary.md
          fi
          
          # Copilot 分析結果も追加
          echo "" >> deploy_summary.md
          cat cd_copilot_report.md >> deploy_summary.md
        fi
        
        # GitHub Step Summary 作成
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 項目 | 値 |" >> $GITHUB_STEP_SUMMARY
        echo "|---|---|" >> $GITHUB_STEP_SUMMARY
        echo "| ステータス | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| イメージ | \`${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| コミット | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ブランチ/タグ | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ] && [ -n "$SSH_HOST" ]; then
          echo "| デプロイメント | ✅ 成功 |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | http://$SSH_HOST:8080 |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ job.status }}" = "success" ] && [ -z "$SSH_HOST" ]; then
          echo "| デプロイメント | ⏭️ スキップ |" >> $GITHUB_STEP_SUMMARY
          echo "| レジストリ | ✅ プッシュ完了 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| デプロイメント | ❌ 失敗 |" >> $GITHUB_STEP_SUMMARY
        fi
