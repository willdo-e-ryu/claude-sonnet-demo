name: GitHub Copilot CLI Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [ main, master, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-cli-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Setup GitHub CLI and Authenticate
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub CLI は ubuntu-latest に既にインストール済み
        echo "GitHub CLI version: $(gh --version)"
        
        # 環境変数が設定されているかチェック
        if [ -z "$GH_TOKEN" ]; then
          echo "❌ GH_TOKEN environment variable is not set"
          exit 1
        fi
        
        # GitHub CLI 認証（環境変数方式）
        export GH_TOKEN="$GH_TOKEN"
        
        # 認証状態を確認
        if gh auth status 2>/dev/null; then
          echo "✅ GitHub CLI authentication successful via GH_TOKEN"
        else
          echo "⚠️ Authentication check failed, but GH_TOKEN is set - proceeding"
        fi
    
    - name: Install GitHub Copilot Extension
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub Copilot 拡張機能をインストール（エラーハンドリング強化）
        echo "🔍 Checking for existing Copilot extension..."
        
        if gh extension list 2>/dev/null | grep -q "gh-copilot"; then
          echo "✅ GitHub Copilot extension already installed"
        else
          echo "📦 Installing GitHub Copilot extension..."
          if gh extension install github/gh-copilot 2>/dev/null; then
            echo "✅ GitHub Copilot extension installed successfully"
          else
            echo "⚠️ Copilot extension installation failed"
            echo "Possible reasons:"
            echo "- GitHub Copilot license required"
            echo "- Network connectivity issues"
            echo "- Extension not available in this environment"
          fi
        fi
        
        # 拡張機能リストを確認
        echo ""
        echo "📋 Installed extensions:"
        gh extension list 2>/dev/null || echo "No extensions found or access denied"
        
        # Copilot コマンドの利用可能性をテスト
        echo ""
        echo "🧪 Testing Copilot CLI availability..."
        if command -v gh >/dev/null 2>&1 && gh copilot --help >/dev/null 2>&1; then
          echo "✅ GitHub Copilot CLI is ready and available"
          echo "COPILOT_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "⚠️ GitHub Copilot CLI not available - will use fallback analysis"
          echo "COPILOT_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: GitHub Copilot CLI Code Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "## 🤖 GitHub Copilot CLI レビュー分析" > copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        echo "### 📅 分析実行日時: $(date '+%Y-%m-%d %H:%M:%S')" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        
        # 変更されたファイルを取得
        git fetch origin ${{ github.event.pull_request.base.ref }}
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD)
        
        echo "### 📄 変更されたファイル一覧" >> copilot_cli_review.md
        echo "\`\`\`" >> copilot_cli_review.md
        echo "$CHANGED_FILES" >> copilot_cli_review.md
        echo "\`\`\`" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        
        # Copilot CLI の利用可否を確認
        echo "🔍 Checking Copilot CLI availability..."
        
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "### 🤖 GitHub Copilot CLI 分析結果" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "✅ **GitHub Copilot CLI 拡張機能が利用可能です**" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
        else
          echo "### ⚠️ GitHub Copilot CLI 制限モード" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "⚠️ **GitHub Copilot CLI 拡張機能が利用できません**" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "**理由の可能性:**" >> copilot_cli_review.md
          echo "- GitHub Copilot ライセンス認証が必要" >> copilot_cli_review.md
          echo "- 拡張機能インストール失敗" >> copilot_cli_review.md
          echo "- GitHub Actions 環境制限" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
        fi
        
        echo "" >> copilot_cli_review.md
          
          # プロジェクト全体についてCopilot提案を取得
          echo "#### 🎯 プロジェクト改善提案" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          
          # Copilot が利用可能な場合のみ詳細提案を取得
          if [ "$COPILOT_AVAILABLE" = "true" ]; then
            echo "**🤖 GitHub Copilot からの提案:**" >> copilot_cli_review.md
            echo "" >> copilot_cli_review.md
            
            # Copilot suggest コマンドで改善提案を取得（エラーハンドリング強化）
            if timeout 30s gh copilot suggest "Canvas ベースのFlappy Birdゲームのコード品質改善について提案してください" 2>/dev/null | head -15 >> copilot_cli_review.md; then
              echo "" >> copilot_cli_review.md
            else
              echo "- ⚠️ Copilot API が一時的に利用できません（タイムアウトまたはレート制限）" >> copilot_cli_review.md
              echo "" >> copilot_cli_review.md
            fi
          fi
          
          # フォールバック提案（Copilot利用不可時または補完として）
          if [ "$COPILOT_AVAILABLE" != "true" ]; then
            echo "**💫 基本的な改善提案:**" >> copilot_cli_review.md
          else
            echo "**💫 追加の改善提案:**" >> copilot_cli_review.md
          fi
          
          echo "- 🎯 **モジュール化**: ゲームロジックを複数のクラスに分割" >> copilot_cli_review.md
          echo "- 🚀 **パフォーマンス**: requestAnimationFrame の最適化" >> copilot_cli_review.md
          echo "- 🧪 **テスト**: Jest によるユニットテスト追加" >> copilot_cli_review.md
          echo "- 🔒 **エラー処理**: try-catch文の適切な配置" >> copilot_cli_review.md
          echo "- 📱 **アクセシビリティ**: キーボード操作対応" >> copilot_cli_review.md
          
          echo "" >> copilot_cli_review.md
          
          # 各ファイルについて個別に分析
          echo "#### 📂 個別ファイル分析" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          
          while IFS= read -r file; do
            if [ -f "$file" ] && [ -n "$file" ]; then
              echo "##### 📄 \`$file\`" >> copilot_cli_review.md
              echo "" >> copilot_cli_review.md
              
              # ファイル拡張子別の分析
              FILE_EXT="${file##*.}"
              case "$FILE_EXT" in
                js)
                  echo "**🔧 JavaScript 分析:**" >> copilot_cli_review.md
                  
                  # ファイルの基本分析（Copilot利用可否に関わらず）
                  LINE_COUNT=$(wc -l < "$file")
                  FUNCTION_COUNT=$(grep -c "function\|const.*=>\|class " "$file" || echo "0")
                  
                  echo "- 📊 行数: $LINE_COUNT 行" >> copilot_cli_review.md
                  echo "- 🔧 関数・クラス数: $FUNCTION_COUNT 個" >> copilot_cli_review.md
                  
                  # Copilot が利用可能な場合のみ実行
                  if [ "$COPILOT_AVAILABLE" = "true" ]; then
                    FILE_PREVIEW=$(head -5 "$file" | grep -v '^$' | head -3)
                    if [ -n "$FILE_PREVIEW" ]; then
                      echo "" >> copilot_cli_review.md
                      echo "**💡 Copilot 提案:**" >> copilot_cli_review.md
                      
                      # Copilot explain でコード分析（タイムアウト付き）
                      if timeout 20s bash -c "echo '$FILE_PREVIEW' | gh copilot explain 2>/dev/null" | head -8 >> copilot_cli_review.md; then
                        echo "" >> copilot_cli_review.md
                      else
                        echo "- Copilot 分析はタイムアウトまたはAPI制限により一時的に利用できません" >> copilot_cli_review.md
                        echo "" >> copilot_cli_review.md
                      fi
                    fi
                  fi
                  
                  # 基本的なコード品質チェック（常に実行）
                  if grep -q "console\.log" "$file"; then
                    echo "- ⚠️ console.log 残存（本番前除去推奨）" >> copilot_cli_review.md
                  fi
                  
                  if grep -q "try\|catch" "$file"; then
                    echo "- ✅ エラーハンドリング実装済み" >> copilot_cli_review.md
                  fi
                  ;;
                html)
                  echo "**📄 HTML ファイル分析:**" >> copilot_cli_review.md
                  if grep -q "alt=\|aria-" "$file"; then
                    echo "- ✅ アクセシビリティ属性あり" >> copilot_cli_review.md
                  else
                    echo "- 💡 alt属性やARIA属性の追加を推奨" >> copilot_cli_review.md
                  fi
                  ;;
                css)
                  echo "**🎨 CSS ファイル分析:**" >> copilot_cli_review.md
                  echo "- サイズ: $(wc -c < "$file") bytes" >> copilot_cli_review.md
                  if grep -q "@media" "$file"; then
                    echo "- ✅ レスポンシブデザイン対応" >> copilot_cli_review.md
                  fi
                  ;;
              esac
              
              echo "" >> copilot_cli_review.md
            fi
          done < <(echo "$CHANGED_FILES")
        else
          echo "### ⚠️ GitHub Copilot CLI 未利用" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "GitHub Copilot CLI 拡張機能が利用できませんでした。" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "**可能な理由:**" >> copilot_cli_review.md
          echo "- GitHub Copilot ライセンス認証が必要" >> copilot_cli_review.md
          echo "- 拡張機能のインストールエラー" >> copilot_cli_review.md
          echo "- API レート制限" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "**💡 代替手段:** VS Code で GitHub Copilot を直接使用することを推奨します。" >> copilot_cli_review.md
        fi
        
        echo "" >> copilot_cli_review.md
        echo "---" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        echo "🤖 **GitHub Copilot CLI 統合分析完了** - $(date '+%Y-%m-%d %H:%M:%S')" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        echo "💡 **ローカル開発**: VS Code で \`gh copilot suggest\` または \`gh copilot explain\` を使用して、より詳細な提案を得ることができます。" >> copilot_cli_review.md
    
    - name: Post Copilot CLI Review to PR
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # PRにCopilot CLI レビューコメントを投稿
        gh pr comment ${{ github.event.pull_request.number }} \
          --body-file copilot_cli_review.md \
          --repo ${{ github.repository }}
        
        echo "✅ GitHub Copilot CLI レビューがPRに投稿されました"
    
    - name: Add Copilot-Related Labels
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Copilot関連ラベルを追加
        gh pr edit ${{ github.event.pull_request.number }} \
          --add-label "copilot-reviewed" \
          --add-label "ai-assisted" \
          --repo ${{ github.repository }} || echo "ラベル追加をスキップ（ラベルが存在しない場合があります）"
        
        echo "✅ Copilot関連ラベルの追加を試行しました"
