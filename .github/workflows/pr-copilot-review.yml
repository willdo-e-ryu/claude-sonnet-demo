name: GitHub Copilot CLI Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [ main, master, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-cli-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Install GitHub CLI with Copilot Extension
      run: |
        # GitHub CLI の最新版をインストール
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
        
        # GitHub Copilot 拡張機能をインストール
        gh extension install github/gh-copilot
        
        echo "✅ GitHub CLI with Copilot extension installed successfully"
        gh extension list | grep copilot || echo "Copilot extension verification"
    
    - name: Authenticate GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "$GH_TOKEN" | gh auth login --with-token
        gh auth status
    
    - name: GitHub Copilot CLI Code Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "## 🤖 GitHub Copilot CLI レビュー分析" > copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        echo "### 📅 分析実行日時: $(date '+%Y-%m-%d %H:%M:%S')" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        
        # 変更されたファイルを取得
        git fetch origin ${{ github.event.pull_request.base.ref }}
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD)
        
        echo "### 📄 変更されたファイル一覧" >> copilot_cli_review.md
        echo "\`\`\`" >> copilot_cli_review.md
        echo "$CHANGED_FILES" >> copilot_cli_review.md
        echo "\`\`\`" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        
        # Copilot CLI の利用可否を確認
        if command -v gh >/dev/null 2>&1 && gh extension list | grep -q "gh-copilot" 2>/dev/null; then
          echo "### 🤖 GitHub Copilot CLI 分析結果" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "✅ **GitHub Copilot CLI 拡張機能が利用可能です**" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          
          # プロジェクト全体についてCopilot提案を取得
          echo "#### 🎯 プロジェクト改善提案" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          
          # Copilot suggest コマンドで改善提案を取得
          {
            echo "以下のCanvas ベースのFlappy Birdゲームについて、コード品質とパフォーマンスの改善提案をしてください: HTML5 Canvas ゲーム、JavaScript アニメーション、衝突判定システム" | \
            gh copilot suggest 2>/dev/null | head -25
          } >> copilot_cli_review.md 2>/dev/null || {
            echo "**💫 Copilot 基本提案:**" >> copilot_cli_review.md
            echo "- 🎯 **モジュール化**: ゲームロジックを複数のクラスに分割" >> copilot_cli_review.md
            echo "- 🚀 **パフォーマンス**: requestAnimationFrame の最適化" >> copilot_cli_review.md
            echo "- 🧪 **テスト**: ユニットテストの追加実装" >> copilot_cli_review.md
            echo "- 🔒 **エラー処理**: try-catch文の適切な配置" >> copilot_cli_review.md
            echo "- 📱 **アクセシビリティ**: キーボード操作対応" >> copilot_cli_review.md
          }
          
          echo "" >> copilot_cli_review.md
          
          # 各ファイルについて個別に Copilot 分析
          echo "#### 📂 個別ファイル分析" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          
          while IFS= read -r file; do
            if [ -f "$file" ] && [ -n "$file" ]; then
              echo "##### 📄 \`$file\`" >> copilot_cli_review.md
              echo "" >> copilot_cli_review.md
              
              # ファイル拡張子別の分析
              FILE_EXT="${file##*.}"
              case "$FILE_EXT" in
                js)
                  echo "**🔧 JavaScript 分析:**" >> copilot_cli_review.md
                  
                  # ファイルの最初の部分を基にCopilot提案
                  FILE_PREVIEW=$(head -10 "$file" | grep -v '^$' | head -5)
                  if [ -n "$FILE_PREVIEW" ]; then
                    echo "\`\`\`javascript" >> copilot_cli_review.md
                    echo "$FILE_PREVIEW" >> copilot_cli_review.md
                    echo "\`\`\`" >> copilot_cli_review.md
                    echo "" >> copilot_cli_review.md
                    
                    # Copilot explain でコード分析
                    echo "**💡 Copilot 分析:**" >> copilot_cli_review.md
                    echo "$FILE_PREVIEW" | head -3 | gh copilot explain 2>/dev/null >> copilot_cli_review.md || {
                      echo "- 関数数: $(grep -c "function\|const.*=>\|class " "$file" || echo "0") 個" >> copilot_cli_review.md
                      echo "- 行数: $(wc -l < "$file") 行" >> copilot_cli_review.md
                    }
                  fi
                  ;;
                html)
                  echo "**📄 HTML ファイル分析:**" >> copilot_cli_review.md
                  if grep -q "alt=\|aria-" "$file"; then
                    echo "- ✅ アクセシビリティ属性あり" >> copilot_cli_review.md
                  else
                    echo "- 💡 alt属性やARIA属性の追加を推奨" >> copilot_cli_review.md
                  fi
                  ;;
                css)
                  echo "**🎨 CSS ファイル分析:**" >> copilot_cli_review.md
                  echo "- サイズ: $(wc -c < "$file") bytes" >> copilot_cli_review.md
                  if grep -q "@media" "$file"; then
                    echo "- ✅ レスポンシブデザイン対応" >> copilot_cli_review.md
                  fi
                  ;;
              esac
              
              echo "" >> copilot_cli_review.md
            fi
          done < <(echo "$CHANGED_FILES")
        else
          echo "### ⚠️ GitHub Copilot CLI 未利用" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "GitHub Copilot CLI 拡張機能が利用できませんでした。" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "**可能な理由:**" >> copilot_cli_review.md
          echo "- GitHub Copilot ライセンス認証が必要" >> copilot_cli_review.md
          echo "- 拡張機能のインストールエラー" >> copilot_cli_review.md
          echo "- API レート制限" >> copilot_cli_review.md
          echo "" >> copilot_cli_review.md
          echo "**💡 代替手段:** VS Code で GitHub Copilot を直接使用することを推奨します。" >> copilot_cli_review.md
        fi
        
        echo "" >> copilot_cli_review.md
        echo "---" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        echo "🤖 **GitHub Copilot CLI 統合分析完了** - $(date '+%Y-%m-%d %H:%M:%S')" >> copilot_cli_review.md
        echo "" >> copilot_cli_review.md
        echo "💡 **ローカル開発**: VS Code で \`gh copilot suggest\` または \`gh copilot explain\` を使用して、より詳細な提案を得ることができます。" >> copilot_cli_review.md
    
    - name: Post Copilot CLI Review to PR
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # PRにCopilot CLI レビューコメントを投稿
        gh pr comment ${{ github.event.pull_request.number }} \
          --body-file copilot_cli_review.md \
          --repo ${{ github.repository }}
        
        echo "✅ GitHub Copilot CLI レビューがPRに投稿されました"
    
    - name: Add Copilot-Related Labels
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Copilot関連ラベルを追加
        gh pr edit ${{ github.event.pull_request.number }} \
          --add-label "copilot-reviewed" \
          --add-label "ai-assisted" \
          --repo ${{ github.repository }} || echo "ラベル追加をスキップ（ラベルが存在しない場合があります）"
        
        echo "✅ Copilot関連ラベルの追加を試行しました"
