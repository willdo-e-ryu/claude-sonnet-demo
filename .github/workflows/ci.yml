name: CI with GitHub Copilot Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  lint-test-copilot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install GitHub CLI with Copilot
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub CLI は ubuntu-latest に既にインストール済み
        echo "GitHub CLI version: $(gh --version)"
        
        # Copilot 拡張をインストール（エラーハンドリング強化）
        if gh extension list 2>/dev/null | grep -q "gh-copilot"; then
          echo "✅ GitHub Copilot extension already installed"
          echo "COPILOT_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "📦 Installing GitHub Copilot extension..."
          if gh extension install github/gh-copilot 2>/dev/null; then
            echo "✅ GitHub Copilot extension installed successfully"
            echo "COPILOT_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Copilot extension installation failed - using fallback analysis"
            echo "COPILOT_AVAILABLE=false" >> $GITHUB_ENV
          fi
        fi
    
    - name: Authenticate GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 環境変数認証方式を使用
        export GH_TOKEN="$GH_TOKEN"
        
        if gh auth status 2>/dev/null; then
          echo "✅ GitHub CLI authentication successful"
        else
          echo "⚠️ GitHub CLI authentication check failed, but proceeding with GH_TOKEN"
        fi
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies and run Copilot pre-analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm ci
        
        echo "## 🤖 CI - GitHub Copilot 品質分析" > ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        echo "### 📅 分析日時: $(date '+%Y-%m-%d %H:%M:%S')" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # Copilot でプロジェクト構造分析
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "### 🔍 プロジェクト構造の Copilot 分析" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          
          # package.json の依存関係についてCopilot分析
          if [ -f "package.json" ]; then
            echo "**📦 package.json 依存関係分析:**" >> ci_copilot_report.md
            if timeout 30s gh copilot suggest "JavaScriptプロジェクトのpackage.json依存関係最適化について提案してください" 2>/dev/null | head -10 >> ci_copilot_report.md; then
              echo "" >> ci_copilot_report.md
            else
              echo "- 💡 Copilot分析: 依存関係の最適化を検討してください" >> ci_copilot_report.md
              echo "" >> ci_copilot_report.md
            fi
          fi
        else
          echo "### ⚠️ 基本プロジェクト分析" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          echo "- 📦 Node.js プロジェクト検出" >> ci_copilot_report.md
          echo "- 🔧 基本品質チェックを実行" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
        fi
    
    - name: Run JavaScript Lint with Copilot Enhancement
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "### 🔧 Lint & Code Quality Analysis" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # 標準のLint実行
        echo "**📋 ESLint 結果:**" >> ci_copilot_report.md
        npm run lint 2>&1 | head -15 >> ci_copilot_report.md || {
          echo "- ⚠️ Lint実行でエラーが発生" >> ci_copilot_report.md
          echo "- package.json にlintスクリプトが未定義の可能性" >> ci_copilot_report.md
        }
        
        echo "" >> ci_copilot_report.md
        
        # Copilot でコード品質提案
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "**🤖 Copilot コード品質提案:**" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          
          # JavaScriptファイルの品質改善提案
          if timeout 30s gh copilot suggest "JavaScript Canvas ゲームのコード品質とLint エラーの解決方法について提案してください" 2>/dev/null | head -15 >> ci_copilot_report.md; then
            echo "" >> ci_copilot_report.md
          else
            echo "- 💫 Copilot 提案が一時的に利用できません" >> ci_copilot_report.md
            echo "" >> ci_copilot_report.md
          fi
        else
          echo "**💫 基本コード品質チェック:**" >> ci_copilot_report.md
          echo "- 🔧 関数の適切な命名" >> ci_copilot_report.md
          echo "- 📝 コメントの充実" >> ci_copilot_report.md
          echo "- 🚀 パフォーマンス最適化" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
        fi
    
    - name: Run Tests with Copilot Analysis
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "" >> ci_copilot_report.md
        echo "### 🧪 テスト実行 & Copilot 分析" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # テスト実行
        echo "**📊 テスト結果:**" >> ci_copilot_report.md
        npm run test 2>&1 | tail -10 >> ci_copilot_report.md || {
          echo "- ℹ️ テストスクリプトが未設定または実行エラー" >> ci_copilot_report.md
        }
        
        echo "" >> ci_copilot_report.md
        
        # Copilot でテスト戦略提案
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "**🤖 Copilot テスト戦略提案:**" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          
          if timeout 30s gh copilot suggest "Canvas ベースのJavaScriptゲームのテスト戦略とテストフレームワークの選択についてアドバイスしてください" 2>/dev/null | head -12 >> ci_copilot_report.md; then
            echo "" >> ci_copilot_report.md
          else
            echo "- 💡 Copilot テスト提案が一時的に利用できません" >> ci_copilot_report.md
            echo "" >> ci_copilot_report.md
          fi
        else
          echo "**💡 基本テスト戦略提案:**" >> ci_copilot_report.md
          echo "- 💡 Jest または Vitest を使用したユニットテスト" >> ci_copilot_report.md
          echo "- 🎯 Canvas API のモック化" >> ci_copilot_report.md
          echo "- 🔄 ゲームロジックの単体テスト" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
        fi
        
    - name: Validate HTML/CSS with Copilot Enhancement
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "" >> ci_copilot_report.md
        echo "### 📄 HTML/CSS 検証 & Copilot 分析" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # HTMLHint による検証
        echo "**🔍 HTMLHint 結果:**" >> ci_copilot_report.md
        npx htmlhint public/*.html 2>&1 | head -10 >> ci_copilot_report.md || echo "HTMLHint warnings detected" >> ci_copilot_report.md
        
        echo "" >> ci_copilot_report.md
        
        # CSS ファイル検証
        echo "**🎨 CSS ファイル検証:**" >> ci_copilot_report.md
        find public -name "*.css" | while read file; do
          if [ -f "$file" ]; then
            FILE_SIZE=$(wc -c < "$file")
            echo "- ✅ $file (${FILE_SIZE} bytes)" >> ci_copilot_report.md
          fi
        done
        
        echo "" >> ci_copilot_report.md
        
        # Copilot でHTML/CSS最適化提案
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "**🤖 Copilot HTML/CSS 最適化提案:**" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          
          if timeout 30s gh copilot suggest "HTML5 Canvas ゲームのHTML構造とCSSスタイリングの最適化について提案してください" 2>/dev/null | head -12 >> ci_copilot_report.md; then
            echo "" >> ci_copilot_report.md
          else
            echo "- 💡 Copilot HTML/CSS提案が一時的に利用できません" >> ci_copilot_report.md
            echo "" >> ci_copilot_report.md
          fi
        else
          echo "**💡 基本HTML/CSS最適化提案:**" >> ci_copilot_report.md
          echo "- 📱 レスポンシブデザインの改善" >> ci_copilot_report.md
          echo "- ⚡ CSS パフォーマンス最適化" >> ci_copilot_report.md
          echo "- 🎯 セマンティックHTML の使用" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
        fi
    
    - name: Build and Test Docker with Copilot
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "" >> ci_copilot_report.md
        echo "### 🐳 Docker ビルド & Copilot インフラ分析" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # Docker ビルド実行
        echo "**🔨 Docker ビルド結果:**" >> ci_copilot_report.md
        BUILD_START=$(date +%s)
        docker build -t flappy-nginx:test . 2>&1 | tail -3 >> ci_copilot_report.md
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        
        echo "- ⏱️ ビルド時間: ${BUILD_TIME} 秒" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # Copilot でDocker最適化提案
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "**🤖 Copilot Docker 最適化提案:**" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          
          if timeout 30s gh copilot suggest "nginx Alpine ベースのDockerfileとマルチステージビルドの最適化について提案してください" 2>/dev/null | head -12 >> ci_copilot_report.md; then
            echo "" >> ci_copilot_report.md
          else
            echo "- 💡 Copilot Docker提案が一時的に利用できません" >> ci_copilot_report.md
            echo "" >> ci_copilot_report.md
          fi
        else
          echo "**💡 基本Docker最適化提案:**" >> ci_copilot_report.md
          echo "- 🚀 マルチステージビルドの活用" >> ci_copilot_report.md
          echo "- 📦 レイヤーキャッシングの最適化" >> ci_copilot_report.md
          echo "- 🔒 セキュリティベースイメージの使用" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
        fi
    
    - name: Test Docker Container
      run: |
        echo "" >> ci_copilot_report.md
        echo "**🧪 アプリケーションテスト結果:**" >> ci_copilot_report.md
        
        # コンテナを起動
        docker run -d -p 8080:80 --name flappy-test flappy-nginx:test
        
        # 少し待つ
        sleep 5
        
        # ヘルスチェック
        if curl -f http://localhost:8080/health 2>/dev/null; then
          echo "- ✅ ヘルスチェック: 成功" >> ci_copilot_report.md
        else
          echo "- ⚠️ ヘルスチェック: エラー" >> ci_copilot_report.md
        fi
        
        # メインページのチェック
        if curl -f http://localhost:8080/ 2>/dev/null | grep -q "Flappy Bird"; then
          echo "- ✅ メインページ: 正常表示" >> ci_copilot_report.md
        else
          echo "- ⚠️ メインページ: 表示エラー" >> ci_copilot_report.md
        fi
        
        # パフォーマンステスト
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8080/ 2>/dev/null || echo "0")
        echo "- ⏱️ レスポンス時間: ${RESPONSE_TIME} 秒" >> ci_copilot_report.md
        
        echo "✅ All tests completed!"
    
    - name: Generate CI Quality Report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "" >> ci_copilot_report.md
        echo "### 📊 CI 品質スコア" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # 品質スコア計算
        QUALITY_SCORE=80
        
        # Dockerビルド成功チェック
        if docker images | grep -q "flappy-nginx:test"; then
          QUALITY_SCORE=$((QUALITY_SCORE + 10))
          echo "- ✅ Docker ビルド: 成功 (+10)" >> ci_copilot_report.md
        fi
        
        # テスト結果チェック
        if curl -f http://localhost:8080/ >/dev/null 2>&1; then
          QUALITY_SCORE=$((QUALITY_SCORE + 10))
          echo "- ✅ アプリケーションテスト: 成功 (+10)" >> ci_copilot_report.md
        fi
        
        echo "" >> ci_copilot_report.md
        echo "**🎯 総合品質スコア: $QUALITY_SCORE/100**" >> ci_copilot_report.md
        echo "" >> ci_copilot_report.md
        
        # Copilot による総合改善提案
        if [ "$COPILOT_AVAILABLE" = "true" ]; then
          echo "**🚀 Copilot による CI/CD 改善提案:**" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
          
          if timeout 30s gh copilot suggest "JavaScript Canvas ゲームのCI/CDパイプラインとDevOps実践の改善について提案してください" 2>/dev/null | head -12 >> ci_copilot_report.md; then
            echo "" >> ci_copilot_report.md
          else
            echo "- 💡 Copilot CI/CD提案が一時的に利用できません" >> ci_copilot_report.md
            echo "" >> ci_copilot_report.md
          fi
        else
          echo "**💡 基本CI/CD改善提案:**" >> ci_copilot_report.md
          echo "- 🔄 自動テストの拡充" >> ci_copilot_report.md
          echo "- 📈 コードカバレッジの測定" >> ci_copilot_report.md
          echo "- 🚀 デプロイメント戦略の改善" >> ci_copilot_report.md
          echo "" >> ci_copilot_report.md
        fi
        
        echo "---" >> ci_copilot_report.md
        echo "🤖 **GitHub Copilot CI 分析完了** - $(date '+%Y-%m-%d %H:%M:%S')" >> ci_copilot_report.md
    
    - name: Post CI Report (for PR only)
      if: github.event_name == 'pull_request'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # PRの場合のみレポートを投稿
        gh pr comment ${{ github.event.pull_request.number }} \
          --body-file ci_copilot_report.md \
          --repo ${{ github.repository }}
        
        echo "✅ CI Copilot レポートがPRに投稿されました"
    
    - name: Cleanup
      if: always()
      run: |
        docker stop flappy-test || true
        docker rm flappy-test || true
        docker rmi flappy-nginx:test || true
