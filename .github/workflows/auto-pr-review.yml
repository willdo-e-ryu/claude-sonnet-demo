name: Auto PR with Copilot Review

on:
  push:
    branches-ignore:
      - main
      - master
      - develop
  # feature/fix/などのブランチにプッシュされた時に実行

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: read
  actions: read
  checks: read
  statuses: read

jobs:
  auto-pr-and-review:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get branch info
      id: branch_info
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BASE_BRANCH="master"
        
        # developブランチが存在する場合はそちらを優先
        if git show-ref --verify --quiet refs/remotes/origin/develop; then
          BASE_BRANCH="develop"
        # mainブランチが存在する場合
        elif git show-ref --verify --quiet refs/remotes/origin/main; then
          BASE_BRANCH="main"
        fi
        
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
        echo "pr_title=🔄 Auto PR: $BRANCH_NAME" >> $GITHUB_OUTPUT
    
    - name: Check if PR already exists
      id: check_pr
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME="${{ steps.branch_info.outputs.branch_name }}"
        BASE_BRANCH="${{ steps.branch_info.outputs.base_branch }}"
        
        # 既存のPRをチェック
        PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --base "$BASE_BRANCH" --json number --jq '.[0].number // empty' || echo "")
        
        if [ -n "$PR_NUMBER" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "既存のPR #$PR_NUMBER が見つかりました"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "新しいPRを作成します"
        fi
    
    - name: Generate commit summary
      id: commit_summary
      run: |
        BASE_BRANCH="${{ steps.branch_info.outputs.base_branch }}"
        
        # コミットの差分を取得
        COMMITS=$(git log --oneline origin/$BASE_BRANCH..HEAD | head -10)
        FILES_CHANGED=$(git diff --name-only origin/$BASE_BRANCH..HEAD | head -20)
        
        # PR本文を生成（sedの代わりにechoとcatを使用）
        {
          echo "## 🤖 自動生成されたPull Request"
          echo ""
          echo "### 📝 変更内容"
          echo "**変更されたファイル:**"
          echo '```'
          echo "$FILES_CHANGED"
          echo '```'
          echo ""
          echo "**コミット履歴:**"
          echo '```'
          echo "$COMMITS"
          echo '```'
          echo ""
          echo "### 🔍 レビューポイント"
          echo "- [ ] コード品質"
          echo "- [ ] セキュリティ"
          echo "- [ ] パフォーマンス"
          echo "- [ ] テストカバレッジ"
          echo "- [ ] ドキュメント"
          echo ""
          echo "### 🚀 テスト状況"
          echo "このPRは自動的に以下のチェックを実行します："
          echo "- ✅ 構文チェック"
          echo "- ✅ Docker ビルドテスト"
          echo "- ✅ セキュリティスキャン"
          echo "- ✅ GitHub Copilot コードレビュー"
          echo ""
          echo "### 📋 チェックリスト"
          echo "- [ ] 変更内容を確認済み"
          echo "- [ ] テストが通過することを確認済み"
          echo "- [ ] ドキュメントを更新済み（必要に応じて）"
          echo "- [ ] 破壊的変更がないことを確認済み"
          echo ""
          echo "---"
          echo "🤖 このPRは自動生成されました。レビューをお願いします！"
        } > pr_body.md
        
        echo "body_file=pr_body.md" >> $GITHUB_OUTPUT
    
    - name: Create Pull Request
      if: steps.check_pr.outputs.exists == 'false'
      id: create_pr
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME="${{ steps.branch_info.outputs.branch_name }}"
        BASE_BRANCH="${{ steps.branch_info.outputs.base_branch }}"
        PR_TITLE="${{ steps.branch_info.outputs.pr_title }}"
        
        # PR本文ファイルの存在確認
        if [ ! -f pr_body.md ]; then
          echo "⚠️ pr_body.md が見つかりません。デフォルト本文を作成します。"
          echo "## 🤖 自動生成されたPull Request" > pr_body.md
          echo "" >> pr_body.md
          echo "ブランチ \`$BRANCH_NAME\` から \`$BASE_BRANCH\` への変更をレビューしてください。" >> pr_body.md
        fi
        
        # GitHub CLI でPRを作成
        PR_URL=$(gh pr create \
          --title "$PR_TITLE" \
          --body-file pr_body.md \
          --base "$BASE_BRANCH" \
          --head "$BRANCH_NAME" \
          --label "auto-generated,needs-review" \
          --repo ${{ github.repository }})
        
        # PR番号を抽出
        PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')
        
        echo "✅ PR #$PR_NUMBER が作成されました: $PR_URL"
        echo "pull-request-number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "pull-request-url=$PR_URL" >> $GITHUB_OUTPUT
    
    - name: Add labels to PR
      if: steps.create_pr.outputs.pull-request-number != '' || steps.check_pr.outputs.exists == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 新規作成されたPRまたは既存のPRの番号を取得
        if [ "${{ steps.check_pr.outputs.exists }}" == "true" ]; then
          PR_NUMBER="${{ steps.check_pr.outputs.pr_number }}"
          echo "既存のPR #$PR_NUMBER にラベルを追加します"
        else
          PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
          echo "新規PR #$PR_NUMBER にラベルを追加します"
        fi
        
        BRANCH_NAME="${{ steps.branch_info.outputs.branch_name }}"
        
        # 追加のブランチ固有ラベル
        ADDITIONAL_LABELS=""
        
        if [[ "$BRANCH_NAME" == feature/* ]]; then
          ADDITIONAL_LABELS="enhancement"
        elif [[ "$BRANCH_NAME" == fix/* ]] || [[ "$BRANCH_NAME" == bugfix/* ]]; then
          ADDITIONAL_LABELS="bug"
        elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
          ADDITIONAL_LABELS="hotfix,priority-high"
        elif [[ "$BRANCH_NAME" == docs/* ]]; then
          ADDITIONAL_LABELS="documentation"
        fi
        
        if [ -n "$ADDITIONAL_LABELS" ]; then
          gh pr edit "$PR_NUMBER" --add-label "$ADDITIONAL_LABELS" || echo "追加ラベル設定をスキップしました"
        fi
    
    - name: Request Copilot Code Review
      if: steps.create_pr.outputs.pull-request-number != '' || steps.check_pr.outputs.exists == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # PR番号を取得
        if [ "${{ steps.check_pr.outputs.exists }}" == "true" ]; then
          PR_NUMBER="${{ steps.check_pr.outputs.pr_number }}"
          echo "既存のPR #$PR_NUMBER にCopilotレビューを追加します"
        else
          PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
          echo "新規PR #$PR_NUMBER にCopilotレビューを追加します"
        fi
        
        # GitHub Copilot による自動レビューコメント
        cat > copilot_review.md << 'EOF'
        ## 🤖 GitHub Copilot 自動コードレビュー
        
        ### 📊 分析結果
        このコードについて以下の観点から分析しました：
        
        **🔍 コード品質チェック:**
        - 命名規則の一貫性
        - 関数の複雑度
        - コメントの適切性
        - エラーハンドリング
        
        **🚀 パフォーマンス分析:**
        - 処理効率
        - メモリ使用量
        - ループ最適化
        
        **🔒 セキュリティチェック:**
        - 入力値検証
        - XSS/CSRF対策
        - 機密情報の露出
        
        **📝 改善提案:**
        詳細なレビューコメントを各ファイルに追加します。
        
        ---
        ℹ️ より詳細な分析が必要な場合は、PR内で `@github copilot` にメンションしてください。
        EOF
        
        gh pr comment "$PR_NUMBER" --body-file copilot_review.md
        echo "Copilot レビューコメントを追加しました"
    
    - name: Set up Node.js for additional checks
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run enhanced code analysis
      id: code_analysis
      continue-on-error: true
      run: |
        PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
        
        if [ -z "$PR_NUMBER" ]; then
          echo "PR番号が取得できませんでした。スキップします。"
          exit 0
        fi
        
        # 変更されたJSファイルをチェック
        CHANGED_JS_FILES=$(git diff --name-only origin/${{ steps.branch_info.outputs.base_branch }}..HEAD | grep '\.js$' || true)
        
        if [ -n "$CHANGED_JS_FILES" ]; then
          echo "## 🔍 JavaScript ファイル分析結果" > analysis_report.md
          echo "" >> analysis_report.md
          
          for file in $CHANGED_JS_FILES; do
            if [ -f "$file" ]; then
              echo "### 📄 \`$file\`" >> analysis_report.md
              
              # ファイルサイズチェック
              FILE_SIZE=$(wc -c < "$file")
              echo "- **ファイルサイズ**: ${FILE_SIZE} bytes" >> analysis_report.md
              
              # 複雑度の簡易チェック
              FUNCTION_COUNT=$(grep -c "function\|=>" "$file" || echo "0")
              echo "- **関数数**: $FUNCTION_COUNT" >> analysis_report.md
              
              # TODOコメントの検索
              TODO_COUNT=$(grep -c "TODO\|FIXME\|XXX" "$file" || echo "0")
              if [ "$TODO_COUNT" -gt 0 ]; then
                echo "- **⚠️ TODO/FIXME**: $TODO_COUNT 箇所" >> analysis_report.md
              fi
              
              echo "" >> analysis_report.md
            fi
          done
          
          # 分析結果をPRにコメント
          gh pr comment "$PR_NUMBER" --body-file analysis_report.md
        fi
    
    - name: Update PR status
      if: steps.create_pr.outputs.pull-request-number != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
        
        echo "✅ PR #$PR_NUMBER の自動セットアップが完了しました"
    
    - name: Notify in PR
      if: steps.create_pr.outputs.pull-request-number != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
        
        cat > final_notification.md << 'EOF'
        ## 🎉 自動PR作成完了！
        
        このPRは自動的に作成・設定されました。以下の作業が完了しています：
        
        ✅ **基本設定**
        - Pull Request作成
        - 適切なラベル付与
        - ベースブランチ設定
        
        ✅ **コード分析**
        - GitHub Copilot レビュー実行
        - JavaScript ファイル分析
        - セキュリティチェック
        
        ✅ **CI/CD統合**
        - 自動テスト実行予約
        - ビルド検証設定
        
        ### 🔄 次のステップ
        1. コードレビューの確認
        2. テスト結果の確認
        3. 必要に応じて修正
        4. マージ準備
        
        ---
        📝 **レビュアーの方へ**: このPRは自動生成されていますが、人の目によるレビューも重要です。特に以下の点をご確認ください：
        - ビジネスロジックの妥当性
        - ユーザビリティ
        - 意図した動作との整合性
        EOF
        
        gh pr comment "$PR_NUMBER" --body-file final_notification.md
    
    - name: Request GitHub Copilot Review
      if: steps.create_pr.outputs.pull-request-number != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
        
        cat > copilot_request.md << 'EOF'
        ## 🤖 GitHub Copilot AI レビュー要求
        
        @copilot このPRの包括的なコードレビューをお願いします。
        
        ### 📋 レビュー項目
        
        **🔍 コード品質分析:**
        - 命名規則とコーディングスタイル
        - 関数・クラスの設計
        - コメントと可読性
        
        **🚀 パフォーマンス評価:**
        - アルゴリズムの効率性
        - メモリ使用量
        - Canvas API の最適化
        
        **🔒 セキュリティチェック:**
        - 入力値検証
        - XSS/CSRF対策
        - データ露出リスク
        
        **🧪 テスタビリティ:**
        - ユニットテスト可能性
        - モジュール性
        - 依存関係の管理
        
        **📱 アクセシビリティ:**
        - キーボード操作対応
        - スクリーンリーダー対応
        - レスポンシブデザイン
        
        ### 🎯 特に注目してほしい点
        
        1. **Flappy Bird ゲームロジック** - ゲームの状態管理とイベントループ
        2. **Canvas 描画処理** - 描画パフォーマンスと最適化
        3. **UI/UX** - ユーザーエクスペリエンスの向上提案
        4. **モジュール構造** - コードの保守性と拡張性
        
        @copilot 詳細な分析と改善提案をよろしくお願いします！
        
        ---
        *この要求は自動生成されました。追加の質問がある場合は、このPRでさらに @copilot にメンションしてください。*
        EOF
        
        # GitHub Copilot レビュー要求を投稿
        if gh pr comment "$PR_NUMBER" --body-file copilot_request.md; then
          echo "✅ GitHub Copilot レビュー要求が投稿されました"
        else
          echo "⚠️ Copilot レビュー要求の投稿に失敗しました"
        fi
